#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/6d23a87e-4744-4238-b8b3-3350ef147fa1 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float water_d;
  int degree;
  CloudSchedule schedule;
  bool lED;
  bool servo_bool;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include <ESP32Servo.h>
#include "thingProperties.h"

int LED_BUILTIN = 2;

// ピンの定義
#define trigPin 12 // 超音波センサのトリガーピン
#define echoPin 14 // 超音波センサのエコーピン
#define SERVO_PIN 4
Servo myServo;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  pinMode(LED_BUILTIN, OUTPUT);
  myServo.attach(SERVO_PIN);
  degree=0;

  pinMode(trigPin, OUTPUT); // トリガーピンを出力として設定
  pinMode(echoPin, INPUT); // エコーピンを入力として設定
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  digitalWrite(LED_BUILTIN, lED);
  myServo.write(degree);
  

  if (schedule.isActive()) {
    degree = 180;
    water_d = measureDistance();
  }
}


/*
  Since LED is READ_WRITE variable, onLEDChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLEDChange()  {
  // Add your code here to act upon LED change
}

/*
  Since Degree is READ_WRITE variable, onDegreeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDegreeChange()  {
  // Add your code here to act upon Degree change
}

/*
  Since ServoBool is READ_WRITE variable, onServoBoolChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onServoBoolChange()  {
  // Add your code here to act upon ServoBool change
}

// 距離測定関数
float measureDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH);
  //音速343m/sec=0.0343cm/μsec
  //μsec  *  m/sec
  float distance = (duration * 0.0343) / 2;
  
  return distance;
}


/*
  Since Timerrr is READ_WRITE variable, onTimerrrChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTimerrrChange()  {
  // Add your code here to act upon Timerrr change
}


/*
  Since Schedule is READ_WRITE variable, onScheduleChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onScheduleChange()  {
  // Add your code here to act upon Schedule change
}
